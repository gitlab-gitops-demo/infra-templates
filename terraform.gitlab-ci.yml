image:
  name: hashicorp/terraform:light
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

# Default output file for Terraform plan
variables:
  PLAN: plan.tfplan
  JSON_PLAN_FILE: tfplan.json
  TF_IN_AUTOMATION: "true"

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .terraform

.aws-k8s-bins: &aws-k8s-bins
  - curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/kubectl
  - install kubectl /usr/local/bin/ && rm kubectl
  - curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/aws-iam-authenticator
  - install aws-iam-authenticator /usr/local/bin/ && rm aws-iam-authenticator

.envconsul: &envconsul
  - curl -s -O https://releases.hashicorp.com/envconsul/0.9.3/envconsul_0.9.3_linux_amd64.tgz
  - echo "fc48c15851119cf5bd6ecc609b6e2b15ece0c7b4d294c8d1890fddeae36a7aaa  envconsul_0.9.3_linux_amd64.tgz" |sha256sum -c
  - tar -xzvf envconsul_0.9.3_linux_amd64.tgz
  - install envconsul /usr/local/bin && rm envconsul
  - "export VAULT_TOKEN=$(curl -s --request POST --data '{\"jwt\": \"'$CI_JOB_JWT'\"}' $VAULT_ADDR/v1/auth/jwt/login | jq -r '.auth.client_token')"
  - alias vaultrun="envconsul -once -config .vault/envconsul.hcl"
  - >- 
    if [ -z "$VAULT_TOKEN" ]; then
      echo "\$VAULT_TOKEN is empty"
    else
      echo "\$VAULT_TOKEN is NOT empty"
    fi


before_script:
  - apk add --update curl jq
  - alias convert_report="jq -r '([.resource_changes[].change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
  #- *aws-k8s-bins
  - *envconsul
  - terraform --version
  - terraform init

stages:
  - validate
  - plan
  - apply
  - deploy
  - destroy

validate:
  stage: validate
  script:
    - vaultrun terraform validate
    - terraform fmt -check=true
  only:
    - branches

merge review:
  stage: plan
  script:
    - vaultrun terraform plan -out=$PLAN
    - "terraform show --json $PLAN | convert_report > $JSON_PLAN_FILE"
  artifacts:
    name: plan
    paths:
      - $PLAN
    reports:
        terraform: $JSON_PLAN_FILE
  only:
    - merge_requests

plan production:
  stage: plan
  script:
    - vaultrun terraform plan -out=$PLAN
  artifacts:
    name: plan
    paths:
      - $PLAN
  only:
    - master
  resource_group: production

apply:
  stage: apply
  script:
    - vaultrun terraform apply -input=false $PLAN
    - DYNAMIC_ENVIRONMENT_URL=$(terraform output -no-color env-dynamic-url)
    - echo "DYNAMIC_ENVIRONMENT_URL=$DYNAMIC_ENVIRONMENT_URL" >> deploy.env
  dependencies:
    - plan production
  artifacts:
    name: $CI_COMMIT_REF_SLUG
    reports:
      dotenv: deploy.env
  only:
    - master
  resource_group: production
  environment:
    name: production
    url: $DYNAMIC_ENVIRONMENT_URL
    on_stop: destroy

deploy-apps:
  stage: deploy
  variables:
    APP_ENVIRONMENT: $CI_PROJECT_NAME
  trigger: gitops-demo/apps/cluster-management
  only:
    - master

destroy:
  stage: destroy
  script:
    - vaultrun terraform destroy -auto-approve
  when: manual
  only:
    - master  
  environment:
    name: production
    action: stop
